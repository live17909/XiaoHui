极光推送接入步骤：
1.在极光官网注册账号，创建app，获取到appkey。
2.在jpush的module的AndroidManifest.xml文件中修改appkey为申请到的appkey值，例如：
<meta-data
            android:name="JPUSH_APPKEY"
            android:value="4bf2d8bc9422f79ea6c4f81d" />修改成自己的AppKey
3.在MyApplication的初始化中调用JPushConfig.init(this, debugMode);//极光推送
4.在BaseActivity中加入以下代码：
@Override
    protected void onResume() {
        super.onResume();
        JPushInterface.onResume(this);//极光推送
    }

    @Override
    protected void onPause() {
        super.onPause();
        JPushInterface.onPause(this);//极光推送
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
在需要处理透传消息或者通知到达和打开的地方比如HomeActivity覆盖AbstractBaseActivity中的以下方法进行处理
@Override
    public void onMessageReceived(String title, String message, String extras, String contentType) {
        super.onMessageReceived(title, message, extras, contentType);
    }

@Override
    public void onNotificationReceived(String title, String content, String extras, String contentType) {
        super.onNotificationReceived(title, content, extras, contentType);
    }

    @Override
    public void onNotificationOpened(String title, String content, String extras) {
        PushBean pushBean = GsonUtil.fromJson(extras, PushBean.class);
        Intent intent = new Intent();
        switch (pushBean.getData().getType()) {
            case 1:
                intent.setClass(context, NoticeDetailActivity.class);
                intent.putExtra(IntentConstant.HOME_VIEW_FLOW, pushBean.getData().getEntityId());
                startActivity(intent);
                break;
            case 2:
                intent.setClass(context, EventDetailActivity.class);
                intent.putExtra(IntentConstant.HOME_VIEW_FLOW, pushBean.getData().getEntityId());
                startActivity(intent);
                break;
        }
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
以下为设置通知栏样式的实例代码：
    ok，来看setStyleBasic,这里我设置了自己的图标：R.drawable.t_2

    /
            *设置通知提示方式 - 基础属性
    */
    private void setStyleBasic(){
        BasicPushNotificationBuilder builder = new BasicPushNotificationBuilder(PushSetActivity.this);
        builder.statusBarDrawable = R.drawable.t_2;
        builder.notificationFlags = Notification.FLAG_AUTO_CANCEL;  //设置为点击后自动消失
        builder.notificationDefaults = Notification.DEFAULT_SOUND;  //设置为铃声（ Notification.DEFAULT_SOUND）或者震动（ Notification.DEFAULT_VIBRATE）
        JPushInterface.setPushNotificationBuilder(1, builder);
        Toast.makeText(PushSetActivity.this, "Basic Builder - 1", Toast.LENGTH_SHORT).show();
    }
    除了极光推送sdk自定义的通知栏属性外。我们可以自定义通知栏的显示界面。来看点击第二个通知栏选项的代码实现

    /
            *设置通知栏样式 - 定义通知栏Layout
    */
    private void setStyleCustom(){
        CustomPushNotificationBuilder builder = new CustomPushNotificationBuilder(PushSetActivity.this,R.layout.customer_notitfication_layout,R.id.icon, R.id.title, R.id.text);
        builder.layoutIconDrawable = R.drawable.ic_launcher;
        builder.developerArg0 = "developerArg2";
        JPushInterface.setPushNotificationBuilder(2, builder);
        Toast.makeText(PushSetActivity.this,"Custom Builder - 2", Toast.LENGTH_SHORT).show();
    }
    这里的R.layout.customer_notitfication_layout就是自定义一个layout。源码也很简单。个人认为极光sdk里的样式就可以满足大部分项目需求了。要自定义也可以，但是不需要太复杂。